#!/usr/bin/env python
import argparse
import subprocess
import os
from os.path import dirname, join
import sys
import logging

# Adapted from
# https://github.com/pre-commit/pre-commit-hooks/blob/master/pre_commit_hooks/detect_private_key.py

BLACKLIST = [
    b'BEGIN PRIVATE KEY',
	b'private_key_id',
	b'private_key',
	b'MYSQL_ROOT_PASSWORD='
]

#: For a complete list, we need to make an OS call:
#: http://stackoverflow.com/a/10164204/315168
GIT_COMMIT_LIST = ["git", "diff-index", "-z", "--cached", "HEAD", "--name-only"]

def main():
    process = subprocess.Popen(GIT_COMMIT_LIST,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    files_to_check = stdout.decode("utf-8").split("\0")
    private_key_files = []

    for filename in files_to_check:
        if len(filename):
            file_path = join(dirname(dirname(dirname(__file__))),filename)
            with open(file_path, 'rb') as f:
                content = f.read()
                if any(line in content for line in BLACKLIST):
                    private_key_files.append(filename)

    if len(private_key_files):
        print(">>>>>> Commit rejected <<<<<<<")
        print("Reason(s): POSSIBLE CREDENTIALS LEAKAGE")
        print("Check the following files: \"{}\"".format("\", \"".join(private_key_files)))
        return 1
    else:
        return 0

if __name__ == "__main__":
    exit(main())
